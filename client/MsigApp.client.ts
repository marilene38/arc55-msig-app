/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "arc55_threshold()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_nextTransactionGroup()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_transaction(uint64,uint8)byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_signatures(uint64,address)byte[64][]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_signerByIndex(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_isSigner(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_mbrSigIncrease(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_mbrTxnIncrease(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_setup(uint8,address[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_newTransactionGroup()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_addTransaction(pay,uint64,uint8,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_addTransactionContinued(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_removeTransaction(uint64,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_setSignatures(pay,uint64,byte[64][])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_clearSignatures(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy()uint64": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_threshold": {
          "type": "uint64",
          "key": "_threshold"
        },
        "_nonce": {
          "type": "uint64",
          "key": "_nonce"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 31,
      "num_uints": 33
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "MsigApp",
    "desc": "",
    "methods": [
      {
        "name": "arc55_threshold",
        "desc": "Retrieve the signature threshold required for the multisignature to be submitted",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Multisignature threshold"
        }
      },
      {
        "name": "arc55_nextTransactionGroup",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Next expected Transaction Group nonce"
        }
      },
      {
        "name": "arc55_transaction",
        "desc": "Retrieve a transaction from a given transaction group",
        "readonly": true,
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "transactionIndex",
            "type": "uint8",
            "desc": "Index of transaction within group"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "A single transaction at the specified index for the transaction group nonce"
        }
      },
      {
        "name": "arc55_signatures",
        "desc": "Retrieve a list of signatures for a given transaction group nonce and address",
        "readonly": true,
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "signer",
            "type": "address",
            "desc": "Address you want to retrieve signatures for"
          }
        ],
        "returns": {
          "type": "byte[64][]",
          "desc": "Array of signatures"
        }
      },
      {
        "name": "arc55_signerByIndex",
        "desc": "Find out which address is at this index of the multisignature",
        "readonly": true,
        "args": [
          {
            "name": "index",
            "type": "uint64",
            "desc": "Address at this index of the multisignature"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Address at index"
        }
      },
      {
        "name": "arc55_isSigner",
        "desc": "Check if an address is a member of the multisignature",
        "readonly": true,
        "args": [
          {
            "name": "address",
            "type": "address",
            "desc": "Address to check is a signer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "True if address is a signer"
        }
      },
      {
        "name": "arc55_mbrSigIncrease",
        "desc": "Calculate the minimum balance requirement for storing a signature",
        "readonly": true,
        "args": [
          {
            "name": "signaturesSize",
            "type": "uint64",
            "desc": "Size (in bytes) of the signatures to store"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "Minimum balance requirement increase"
        }
      },
      {
        "name": "arc55_mbrTxnIncrease",
        "desc": "Calculate the minimum balance requirement for storing a transaction",
        "readonly": true,
        "args": [
          {
            "name": "transactionSize",
            "type": "uint64",
            "desc": "Size (in bytes) of the transaction to store"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "Minimum balance requirement increase"
        }
      },
      {
        "name": "arc55_setup",
        "desc": "Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.",
        "args": [
          {
            "name": "threshold",
            "type": "uint8",
            "desc": "Initial multisig threshold, must be greater than 0"
          },
          {
            "name": "addresses",
            "type": "address[]",
            "desc": "Array of addresses that make up the multisig"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc55_newTransactionGroup",
        "desc": "Generate a new transaction group nonce for holding pending transactions",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "transactionGroup Transaction Group nonce"
        }
      },
      {
        "name": "arc55_addTransaction",
        "desc": "Add a transaction to an existing group. Only one transaction should be included per call",
        "args": [
          {
            "name": "costs",
            "type": "pay",
            "desc": "Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (9 + transaction.length))"
          },
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "index",
            "type": "uint8",
            "desc": "Transaction position within atomic group to add"
          },
          {
            "name": "transaction",
            "type": "byte[]",
            "desc": "Transaction to add"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TransactionAdded",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "transactionIndex",
                "type": "uint8"
              }
            ],
            "desc": "Emitted when a new transaction is added to a transaction group"
          }
        ]
      },
      {
        "name": "arc55_addTransactionContinued",
        "args": [
          {
            "name": "transaction",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc55_removeTransaction",
        "desc": "Remove transaction from the app. The MBR associated with the transaction will be returned to the transaction sender.",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "index",
            "type": "uint8",
            "desc": "Transaction position within atomic group to remove"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TransactionRemoved",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "transactionIndex",
                "type": "uint8"
              }
            ],
            "desc": "Emitted when a transaction has been removed from a transaction group"
          }
        ]
      },
      {
        "name": "arc55_setSignatures",
        "desc": "Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays",
        "args": [
          {
            "name": "costs",
            "type": "pay",
            "desc": "Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (40 + signatures.length))"
          },
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "signatures",
            "type": "byte[64][]",
            "desc": "Array of signatures"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SignatureSet",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "signer",
                "type": "address"
              }
            ],
            "desc": "Emitted when a new signature is added to a transaction group"
          }
        ]
      },
      {
        "name": "arc55_clearSignatures",
        "desc": "Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "address",
            "type": "address",
            "desc": "Address whose signatures to clear"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SignatureSet",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "signer",
                "type": "address"
              }
            ],
            "desc": "Emitted when a new signature is added to a transaction group"
          }
        ]
      },
      {
        "name": "deploy",
        "desc": "Deploy a new On-Chain Msig App.",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Msig App Application ID"
        }
      },
      {
        "name": "update",
        "desc": "Update the application",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the application and return funds to creator address. All transactions must be removed before calling destroy",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "TransactionAdded",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "transactionIndex",
            "type": "uint8"
          }
        ],
        "desc": "Emitted when a new transaction is added to a transaction group"
      },
      {
        "name": "TransactionRemoved",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "transactionIndex",
            "type": "uint8"
          }
        ],
        "desc": "Emitted when a transaction has been removed from a transaction group"
      },
      {
        "name": "SignatureSet",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "signer",
            "type": "address"
          }
        ],
        "desc": "Emitted when a new signature is added to a transaction group"
      },
      {
        "name": "SignatureCleared",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "signer",
            "type": "address"
          }
        ],
        "desc": "Emitted when a signature has been removed from a transaction group"
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the MsigApp smart contract.
 */
export type MsigApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'arc55_threshold()uint64' | 'arc55_threshold', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Multisignature threshold
       */
      returns: bigint
    }>
    & Record<'arc55_nextTransactionGroup()uint64' | 'arc55_nextTransactionGroup', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Next expected Transaction Group nonce
       */
      returns: bigint
    }>
    & Record<'arc55_transaction(uint64,uint8)byte[]' | 'arc55_transaction', {
      argsObj: {
        /**
         * Transaction Group nonce
         */
        transactionGroup: bigint | number
        /**
         * Index of transaction within group
         */
        transactionIndex: number
      }
      argsTuple: [transactionGroup: bigint | number, transactionIndex: number]
      /**
       * A single transaction at the specified index for the transaction group nonce
       */
      returns: Uint8Array
    }>
    & Record<'arc55_signatures(uint64,address)byte[64][]' | 'arc55_signatures', {
      argsObj: {
        /**
         * Transaction Group nonce
         */
        transactionGroup: bigint | number
        /**
         * Address you want to retrieve signatures for
         */
        signer: string
      }
      argsTuple: [transactionGroup: bigint | number, signer: string]
      /**
       * Array of signatures
       */
      returns: Uint8Array[]
    }>
    & Record<'arc55_signerByIndex(uint64)address' | 'arc55_signerByIndex', {
      argsObj: {
        /**
         * Address at this index of the multisignature
         */
        index: bigint | number
      }
      argsTuple: [index: bigint | number]
      /**
       * Address at index
       */
      returns: string
    }>
    & Record<'arc55_isSigner(address)bool' | 'arc55_isSigner', {
      argsObj: {
        /**
         * Address to check is a signer
         */
        address: string
      }
      argsTuple: [address: string]
      /**
       * True if address is a signer
       */
      returns: boolean
    }>
    & Record<'arc55_mbrSigIncrease(uint64)uint64' | 'arc55_mbrSigIncrease', {
      argsObj: {
        /**
         * Size (in bytes) of the signatures to store
         */
        signaturesSize: bigint | number
      }
      argsTuple: [signaturesSize: bigint | number]
      /**
       * Minimum balance requirement increase
       */
      returns: bigint
    }>
    & Record<'arc55_mbrTxnIncrease(uint64)uint64' | 'arc55_mbrTxnIncrease', {
      argsObj: {
        /**
         * Size (in bytes) of the transaction to store
         */
        transactionSize: bigint | number
      }
      argsTuple: [transactionSize: bigint | number]
      /**
       * Minimum balance requirement increase
       */
      returns: bigint
    }>
    & Record<'arc55_setup(uint8,address[])void' | 'arc55_setup', {
      argsObj: {
        /**
         * Initial multisig threshold, must be greater than 0
         */
        threshold: number
        /**
         * Array of addresses that make up the multisig
         */
        addresses: string[]
      }
      argsTuple: [threshold: number, addresses: string[]]
      returns: void
    }>
    & Record<'arc55_newTransactionGroup()uint64' | 'arc55_newTransactionGroup', {
      argsObj: {
      }
      argsTuple: []
      /**
       * transactionGroup Transaction Group nonce
       */
      returns: bigint
    }>
    & Record<'arc55_addTransaction(pay,uint64,uint8,byte[])void' | 'arc55_addTransaction', {
      argsObj: {
        /**
         * Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (9 + transaction.length))
         */
        costs: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Transaction Group nonce
         */
        transactionGroup: bigint | number
        /**
         * Transaction position within atomic group to add
         */
        index: number
        /**
         * Transaction to add
         */
        transaction: Uint8Array
      }
      argsTuple: [costs: TransactionToSign | Transaction | Promise<SendTransactionResult>, transactionGroup: bigint | number, index: number, transaction: Uint8Array]
      returns: void
    }>
    & Record<'arc55_addTransactionContinued(byte[])void' | 'arc55_addTransactionContinued', {
      argsObj: {
        transaction: Uint8Array
      }
      argsTuple: [transaction: Uint8Array]
      returns: void
    }>
    & Record<'arc55_removeTransaction(uint64,uint8)void' | 'arc55_removeTransaction', {
      argsObj: {
        /**
         * Transaction Group nonce
         */
        transactionGroup: bigint | number
        /**
         * Transaction position within atomic group to remove
         */
        index: number
      }
      argsTuple: [transactionGroup: bigint | number, index: number]
      returns: void
    }>
    & Record<'arc55_setSignatures(pay,uint64,byte[64][])void' | 'arc55_setSignatures', {
      argsObj: {
        /**
         * Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (40 + signatures.length))
         */
        costs: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Transaction Group nonce
         */
        transactionGroup: bigint | number
        /**
         * Array of signatures
         */
        signatures: Uint8Array[]
      }
      argsTuple: [costs: TransactionToSign | Transaction | Promise<SendTransactionResult>, transactionGroup: bigint | number, signatures: Uint8Array[]]
      returns: void
    }>
    & Record<'arc55_clearSignatures(uint64,address)void' | 'arc55_clearSignatures', {
      argsObj: {
        /**
         * Transaction Group nonce
         */
        transactionGroup: bigint | number
        /**
         * Address whose signatures to clear
         */
        address: string
      }
      argsTuple: [transactionGroup: bigint | number, address: string]
      returns: void
    }>
    & Record<'deploy()uint64' | 'deploy', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Msig App Application ID
       */
      returns: bigint
    }>
    & Record<'update()void' | 'update', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'destroy()void' | 'destroy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      '_threshold'?: IntegerState
      '_nonce'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MsigAppSig = keyof MsigApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MsigAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the MsigApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MsigAppSig> = MsigApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MsigApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MsigAppSig> = MsigApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MsigAppCreateCalls = (typeof MsigAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MsigAppCreateCallParams =
  | (TypedCallParams<'deploy()uint64'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type MsigAppUpdateCalls = (typeof MsigAppCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type MsigAppUpdateCallParams =
  | TypedCallParams<'update()void'>
/**
 * A factory for available 'delete' calls
 */
export type MsigAppDeleteCalls = (typeof MsigAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type MsigAppDeleteCallParams =
  | TypedCallParams<'destroy()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type MsigAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MsigAppCreateCalls) => MsigAppCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: MsigAppUpdateCalls) => MsigAppUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: MsigAppDeleteCalls) => MsigAppDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MsigAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the MsigApp smart contract using the deploy()uint64 ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deploy(args: MethodArgs<'deploy()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'deploy()uint64' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the MsigApp smart contract using the update()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the MsigApp smart contract using the destroy()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'destroy()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc55_threshold()uint64 ABI method
   *
   * Retrieve the signature threshold required for the multisignature to be submitted
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55Threshold(args: MethodArgs<'arc55_threshold()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_threshold()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_nextTransactionGroup()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55NextTransactionGroup(args: MethodArgs<'arc55_nextTransactionGroup()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_nextTransactionGroup()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_transaction(uint64,uint8)byte[] ABI method
   *
   * Retrieve a transaction from a given transaction group
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55Transaction(args: MethodArgs<'arc55_transaction(uint64,uint8)byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_transaction(uint64,uint8)byte[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.transactionGroup, args.transactionIndex],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_signatures(uint64,address)byte[64][] ABI method
   *
   * Retrieve a list of signatures for a given transaction group nonce and address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55Signatures(args: MethodArgs<'arc55_signatures(uint64,address)byte[64][]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_signatures(uint64,address)byte[64][]' as const,
      methodArgs: Array.isArray(args) ? args : [args.transactionGroup, args.signer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_signerByIndex(uint64)address ABI method
   *
   * Find out which address is at this index of the multisignature
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55SignerByIndex(args: MethodArgs<'arc55_signerByIndex(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_signerByIndex(uint64)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_isSigner(address)bool ABI method
   *
   * Check if an address is a member of the multisignature
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55IsSigner(args: MethodArgs<'arc55_isSigner(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_isSigner(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_mbrSigIncrease(uint64)uint64 ABI method
   *
   * Calculate the minimum balance requirement for storing a signature
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55MbrSigIncrease(args: MethodArgs<'arc55_mbrSigIncrease(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_mbrSigIncrease(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.signaturesSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_mbrTxnIncrease(uint64)uint64 ABI method
   *
   * Calculate the minimum balance requirement for storing a transaction
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55MbrTxnIncrease(args: MethodArgs<'arc55_mbrTxnIncrease(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_mbrTxnIncrease(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.transactionSize],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_setup(uint8,address[])void ABI method
   *
   * Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55Setup(args: MethodArgs<'arc55_setup(uint8,address[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_setup(uint8,address[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.threshold, args.addresses],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_newTransactionGroup()uint64 ABI method
   *
   * Generate a new transaction group nonce for holding pending transactions
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55NewTransactionGroup(args: MethodArgs<'arc55_newTransactionGroup()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_newTransactionGroup()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_addTransaction(pay,uint64,uint8,byte[])void ABI method
   *
   * Add a transaction to an existing group. Only one transaction should be included per call
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55AddTransaction(args: MethodArgs<'arc55_addTransaction(pay,uint64,uint8,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_addTransaction(pay,uint64,uint8,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.costs, args.transactionGroup, args.index, args.transaction],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_addTransactionContinued(byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55AddTransactionContinued(args: MethodArgs<'arc55_addTransactionContinued(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_addTransactionContinued(byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.transaction],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_removeTransaction(uint64,uint8)void ABI method
   *
   * Remove transaction from the app. The MBR associated with the transaction will be returned to the transaction sender.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55RemoveTransaction(args: MethodArgs<'arc55_removeTransaction(uint64,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_removeTransaction(uint64,uint8)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.transactionGroup, args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_setSignatures(pay,uint64,byte[64][])void ABI method
   *
   * Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55SetSignatures(args: MethodArgs<'arc55_setSignatures(pay,uint64,byte[64][])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_setSignatures(pay,uint64,byte[64][])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.costs, args.transactionGroup, args.signatures],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc55_clearSignatures(uint64,address)void ABI method
   *
   * Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc55ClearSignatures(args: MethodArgs<'arc55_clearSignatures(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc55_clearSignatures(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.transactionGroup, args.address],
      ...params,
    }
  }
}

/**
 * A client to make calls to the MsigApp smart contract
 */
export class MsigAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MsigAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof MsigApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the MsigApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MsigAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MsigAppCallFactory.create)
    const updateArgs = params.updateCall?.(MsigAppCallFactory.update)
    const deleteArgs = params.deleteCall?.(MsigAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the MsigApp smart contract using the deploy()uint64 ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: Msig App Application ID
       */
      async deploy(args: MethodArgs<'deploy()uint64'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'deploy()uint64'>, AppCreateCallTransactionResult>(await $this.appClient.create(MsigAppCallFactory.create.deploy(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the MsigApp smart contract using the update()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'update()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(MsigAppCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the MsigApp smart contract using the destroy()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'destroy()void'>>(await $this.appClient.delete(MsigAppCallFactory.delete.destroy(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the MsigApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the arc55_threshold()uint64 ABI method.
   *
   * Retrieve the signature threshold required for the multisignature to be submitted
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Multisignature threshold
   */
  public arc55Threshold(args: MethodArgs<'arc55_threshold()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55Threshold(args, params))
  }

  /**
   * Calls the arc55_nextTransactionGroup()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Next expected Transaction Group nonce
   */
  public arc55NextTransactionGroup(args: MethodArgs<'arc55_nextTransactionGroup()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55NextTransactionGroup(args, params))
  }

  /**
   * Calls the arc55_transaction(uint64,uint8)byte[] ABI method.
   *
   * Retrieve a transaction from a given transaction group
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: A single transaction at the specified index for the transaction group nonce
   */
  public arc55Transaction(args: MethodArgs<'arc55_transaction(uint64,uint8)byte[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55Transaction(args, params))
  }

  /**
   * Calls the arc55_signatures(uint64,address)byte[64][] ABI method.
   *
   * Retrieve a list of signatures for a given transaction group nonce and address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Array of signatures
   */
  public arc55Signatures(args: MethodArgs<'arc55_signatures(uint64,address)byte[64][]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55Signatures(args, params))
  }

  /**
   * Calls the arc55_signerByIndex(uint64)address ABI method.
   *
   * Find out which address is at this index of the multisignature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address at index
   */
  public arc55SignerByIndex(args: MethodArgs<'arc55_signerByIndex(uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55SignerByIndex(args, params))
  }

  /**
   * Calls the arc55_isSigner(address)bool ABI method.
   *
   * Check if an address is a member of the multisignature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: True if address is a signer
   */
  public arc55IsSigner(args: MethodArgs<'arc55_isSigner(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55IsSigner(args, params))
  }

  /**
   * Calls the arc55_mbrSigIncrease(uint64)uint64 ABI method.
   *
   * Calculate the minimum balance requirement for storing a signature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Minimum balance requirement increase
   */
  public arc55MbrSigIncrease(args: MethodArgs<'arc55_mbrSigIncrease(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55MbrSigIncrease(args, params))
  }

  /**
   * Calls the arc55_mbrTxnIncrease(uint64)uint64 ABI method.
   *
   * Calculate the minimum balance requirement for storing a transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Minimum balance requirement increase
   */
  public arc55MbrTxnIncrease(args: MethodArgs<'arc55_mbrTxnIncrease(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55MbrTxnIncrease(args, params))
  }

  /**
   * Calls the arc55_setup(uint8,address[])void ABI method.
   *
   * Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc55Setup(args: MethodArgs<'arc55_setup(uint8,address[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55Setup(args, params))
  }

  /**
   * Calls the arc55_newTransactionGroup()uint64 ABI method.
   *
   * Generate a new transaction group nonce for holding pending transactions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: transactionGroup Transaction Group nonce
   */
  public arc55NewTransactionGroup(args: MethodArgs<'arc55_newTransactionGroup()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55NewTransactionGroup(args, params))
  }

  /**
   * Calls the arc55_addTransaction(pay,uint64,uint8,byte[])void ABI method.
   *
   * Add a transaction to an existing group. Only one transaction should be included per call
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc55AddTransaction(args: MethodArgs<'arc55_addTransaction(pay,uint64,uint8,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55AddTransaction(args, params))
  }

  /**
   * Calls the arc55_addTransactionContinued(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc55AddTransactionContinued(args: MethodArgs<'arc55_addTransactionContinued(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55AddTransactionContinued(args, params))
  }

  /**
   * Calls the arc55_removeTransaction(uint64,uint8)void ABI method.
   *
   * Remove transaction from the app. The MBR associated with the transaction will be returned to the transaction sender.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc55RemoveTransaction(args: MethodArgs<'arc55_removeTransaction(uint64,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55RemoveTransaction(args, params))
  }

  /**
   * Calls the arc55_setSignatures(pay,uint64,byte[64][])void ABI method.
   *
   * Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc55SetSignatures(args: MethodArgs<'arc55_setSignatures(pay,uint64,byte[64][])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55SetSignatures(args, params))
  }

  /**
   * Calls the arc55_clearSignatures(uint64,address)void ABI method.
   *
   * Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc55ClearSignatures(args: MethodArgs<'arc55_clearSignatures(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MsigAppCallFactory.arc55ClearSignatures(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<MsigApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get _threshold() {
        return MsigAppClient.getIntegerState(state, '_threshold')
      },
      get _nonce() {
        return MsigAppClient.getIntegerState(state, '_nonce')
      },
    }
  }

  public compose(): MsigAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      arc55Threshold(args: MethodArgs<'arc55_threshold()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55Threshold(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55NextTransactionGroup(args: MethodArgs<'arc55_nextTransactionGroup()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55NextTransactionGroup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55Transaction(args: MethodArgs<'arc55_transaction(uint64,uint8)byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55Transaction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55Signatures(args: MethodArgs<'arc55_signatures(uint64,address)byte[64][]'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55Signatures(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55SignerByIndex(args: MethodArgs<'arc55_signerByIndex(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55SignerByIndex(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55IsSigner(args: MethodArgs<'arc55_isSigner(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55IsSigner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55MbrSigIncrease(args: MethodArgs<'arc55_mbrSigIncrease(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55MbrSigIncrease(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55MbrTxnIncrease(args: MethodArgs<'arc55_mbrTxnIncrease(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55MbrTxnIncrease(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55Setup(args: MethodArgs<'arc55_setup(uint8,address[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55Setup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55NewTransactionGroup(args: MethodArgs<'arc55_newTransactionGroup()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55NewTransactionGroup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55AddTransaction(args: MethodArgs<'arc55_addTransaction(pay,uint64,uint8,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55AddTransaction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55AddTransactionContinued(args: MethodArgs<'arc55_addTransactionContinued(byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55AddTransactionContinued(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55RemoveTransaction(args: MethodArgs<'arc55_removeTransaction(uint64,uint8)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55RemoveTransaction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55SetSignatures(args: MethodArgs<'arc55_setSignatures(pay,uint64,byte[64][])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55SetSignatures(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc55ClearSignatures(args: MethodArgs<'arc55_clearSignatures(uint64,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc55ClearSignatures(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          destroy(args: MethodArgs<'destroy()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.destroy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MsigAppComposer
  }
}
export type MsigAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc55_threshold()uint64 ABI method.
   *
   * Retrieve the signature threshold required for the multisignature to be submitted
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55Threshold(args: MethodArgs<'arc55_threshold()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_threshold()uint64'>]>

  /**
   * Calls the arc55_nextTransactionGroup()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55NextTransactionGroup(args: MethodArgs<'arc55_nextTransactionGroup()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_nextTransactionGroup()uint64'>]>

  /**
   * Calls the arc55_transaction(uint64,uint8)byte[] ABI method.
   *
   * Retrieve a transaction from a given transaction group
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55Transaction(args: MethodArgs<'arc55_transaction(uint64,uint8)byte[]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_transaction(uint64,uint8)byte[]'>]>

  /**
   * Calls the arc55_signatures(uint64,address)byte[64][] ABI method.
   *
   * Retrieve a list of signatures for a given transaction group nonce and address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55Signatures(args: MethodArgs<'arc55_signatures(uint64,address)byte[64][]'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_signatures(uint64,address)byte[64][]'>]>

  /**
   * Calls the arc55_signerByIndex(uint64)address ABI method.
   *
   * Find out which address is at this index of the multisignature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55SignerByIndex(args: MethodArgs<'arc55_signerByIndex(uint64)address'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_signerByIndex(uint64)address'>]>

  /**
   * Calls the arc55_isSigner(address)bool ABI method.
   *
   * Check if an address is a member of the multisignature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55IsSigner(args: MethodArgs<'arc55_isSigner(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_isSigner(address)bool'>]>

  /**
   * Calls the arc55_mbrSigIncrease(uint64)uint64 ABI method.
   *
   * Calculate the minimum balance requirement for storing a signature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55MbrSigIncrease(args: MethodArgs<'arc55_mbrSigIncrease(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_mbrSigIncrease(uint64)uint64'>]>

  /**
   * Calls the arc55_mbrTxnIncrease(uint64)uint64 ABI method.
   *
   * Calculate the minimum balance requirement for storing a transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55MbrTxnIncrease(args: MethodArgs<'arc55_mbrTxnIncrease(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_mbrTxnIncrease(uint64)uint64'>]>

  /**
   * Calls the arc55_setup(uint8,address[])void ABI method.
   *
   * Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55Setup(args: MethodArgs<'arc55_setup(uint8,address[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_setup(uint8,address[])void'>]>

  /**
   * Calls the arc55_newTransactionGroup()uint64 ABI method.
   *
   * Generate a new transaction group nonce for holding pending transactions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55NewTransactionGroup(args: MethodArgs<'arc55_newTransactionGroup()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_newTransactionGroup()uint64'>]>

  /**
   * Calls the arc55_addTransaction(pay,uint64,uint8,byte[])void ABI method.
   *
   * Add a transaction to an existing group. Only one transaction should be included per call
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55AddTransaction(args: MethodArgs<'arc55_addTransaction(pay,uint64,uint8,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_addTransaction(pay,uint64,uint8,byte[])void'>]>

  /**
   * Calls the arc55_addTransactionContinued(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55AddTransactionContinued(args: MethodArgs<'arc55_addTransactionContinued(byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_addTransactionContinued(byte[])void'>]>

  /**
   * Calls the arc55_removeTransaction(uint64,uint8)void ABI method.
   *
   * Remove transaction from the app. The MBR associated with the transaction will be returned to the transaction sender.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55RemoveTransaction(args: MethodArgs<'arc55_removeTransaction(uint64,uint8)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_removeTransaction(uint64,uint8)void'>]>

  /**
   * Calls the arc55_setSignatures(pay,uint64,byte[64][])void ABI method.
   *
   * Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55SetSignatures(args: MethodArgs<'arc55_setSignatures(pay,uint64,byte[64][])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_setSignatures(pay,uint64,byte[64][])void'>]>

  /**
   * Calls the arc55_clearSignatures(uint64,address)void ABI method.
   *
   * Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc55ClearSignatures(args: MethodArgs<'arc55_clearSignatures(uint64,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, MethodReturn<'arc55_clearSignatures(uint64,address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the MsigApp smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams): MsigAppComposer<[...TReturns, MethodReturn<'update()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the MsigApp smart contract using the destroy()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    destroy(args: MethodArgs<'destroy()void'>, params?: AppClientCallCoreParams): MsigAppComposer<[...TReturns, MethodReturn<'destroy()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the MsigApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): MsigAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MsigAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<MsigAppComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<MsigAppComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type MsigAppComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type MsigAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
