{
  "hints": {
    "arc55_threshold()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_transaction(uint64,uint8)byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_signatures(uint64,address)byte[64][]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_signerByIndex(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_isSigner(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_mbrSigIncrease(byte[64][])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_mbrTxnIncrease(byte[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_setup(uint8,address[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_newTransactionGroup()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_addTransaction(pay,uint64,uint8,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_removeTransaction(uint64,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_setSignatures(pay,uint64,byte[64][])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_clearSignatures(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy()uint64": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_threshold": {
          "type": "uint64",
          "key": "_threshold"
        },
        "_nonce": {
          "type": "uint64",
          "key": "_nonce"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 8,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjc0LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIGNhbGxfVXBkYXRlQXBwbGljYXRpb24gY2FsbF9EZWxldGVBcHBsaWNhdGlvbiBjcmVhdGVfTm9PcCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVECgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCi8vIG9ubHlTaWduZXIoKXZvaWQKLy8KLy8gQ2hlY2sgdGhlIHRyYW5zYWN0aW9uIHNlbmRlciBpcyBhIHNpZ25lciBmb3IgdGhlIG11bHRpc2lnCm9ubHlTaWduZXI6Cglwcm90byAwIDAKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjgxCgkvLyBhc3NlcnQodGhpcy5fYWRkcmVzc0NvdW50KHRoaXMudHhuLnNlbmRlcikuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJdHhuIFNlbmRlcgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYXNzZXJ0CglyZXRzdWIKCi8vIG9ubHlDcmVhdG9yKCl2b2lkCi8vCi8vIENoZWNrIHRoZSB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgdGhlIGNvbnRyYWN0IGNyZWF0b3IKb25seUNyZWF0b3I6Cglwcm90byAwIDAKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjg4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzKQoJdHhuIFNlbmRlcgoJZ2xvYmFsIENyZWF0b3JBZGRyZXNzCgk9PQoJYXNzZXJ0CglyZXRzdWIKCmFiaV9yb3V0ZV9hcmM1NV90aHJlc2hvbGQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgYXJjNTVfdGhyZXNob2xkKCl1aW50NjQKCWNhbGxzdWIgYXJjNTVfdGhyZXNob2xkCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjNTVfdGhyZXNob2xkKCl1aW50NjQKLy8KLy8gUmV0cmlldmUgdGhlIHNpZ25hdHVyZSB0aHJlc2hvbGQgcmVxdWlyZWQgZm9yIHRoZSBtdWx0aXNpZ25hdHVyZSB0byBiZSBzdWJtaXR0ZWQKLy8gQHJldHVybnMgTXVsdGlzaWduYXR1cmUgdGhyZXNob2xkCmFyYzU1X3RocmVzaG9sZDoKCXByb3RvIDAgMQoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6OTkKCS8vIHJldHVybiB0aGlzLl90aHJlc2hvbGQudmFsdWU7CglieXRlIDB4NWY3NDY4NzI2NTczNjg2ZjZjNjQgLy8gIl90aHJlc2hvbGQiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgphYmlfcm91dGVfYXJjNTVfdHJhbnNhY3Rpb246CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHRyYW5zYWN0aW9uSW5kZXg6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFyYzU1X3RyYW5zYWN0aW9uKHVpbnQ4LHVpbnQ2NClieXRlW10KCWNhbGxzdWIgYXJjNTVfdHJhbnNhY3Rpb24KCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjNTVfdHJhbnNhY3Rpb24odWludDgsdWludDY0KWJ5dGVbXQovLwovLyBSZXRyaWV2ZSBhIHRyYW5zYWN0aW9uIGZyb20gYSBnaXZlbiB0cmFuc2FjdGlvbiBncm91cAovLyBAcGFyYW0gdHJhbnNhY3Rpb25Hcm91cCBUcmFuc2FjdGlvbiBHcm91cCBub25jZQovLyBAcGFyYW0gdHJhbnNhY3Rpb25JbmRleCBJbmRleCBvZiB0cmFuc2FjdGlvbiB3aXRoaW4gZ3JvdXAKLy8gQHJldHVybnMgQSBzaW5nbGUgdHJhbnNhY3Rpb24gYXQgdGhlIHNwZWNpZmllZCBpbmRleCBmb3IgdGhlIHRyYW5zYWN0aW9uIGdyb3VwIG5vbmNlCmFyYzU1X3RyYW5zYWN0aW9uOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjExMAoJLy8gdHJhbnNhY3Rpb25Cb3g6IFRyYW5zYWN0aW9uR3JvdXAgPSB7CgkvLyAgICAgICAgICAgICBub25jZTogdHJhbnNhY3Rpb25Hcm91cCwKCS8vICAgICAgICAgICAgIGluZGV4OiB0cmFuc2FjdGlvbkluZGV4CgkvLyAgICAgICAgIH0KCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyB0cmFuc2FjdGlvbkluZGV4OiB1aW50OAoJaXRvYgoJZXh0cmFjdCA3IDEKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHRyYW5zYWN0aW9uQm94OiBUcmFuc2FjdGlvbkdyb3VwCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoxMTUKCS8vIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbnModHJhbnNhY3Rpb25Cb3gpLnZhbHVlOwoJZnJhbWVfZGlnIDAgLy8gdHJhbnNhY3Rpb25Cb3g6IFRyYW5zYWN0aW9uR3JvdXAKCWJveF9nZXQKCWFzc2VydAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgphYmlfcm91dGVfYXJjNTVfc2lnbmF0dXJlczoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gc2lnbmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gdHJhbnNhY3Rpb25Hcm91cDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhcmM1NV9zaWduYXR1cmVzKGFkZHJlc3MsdWludDY0KWJ5dGVbNjRdW10KCWNhbGxzdWIgYXJjNTVfc2lnbmF0dXJlcwoJZHVwCglsZW4KCWludCA2NAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzU1X3NpZ25hdHVyZXMoYWRkcmVzcyx1aW50NjQpYnl0ZVs2NF1bXQovLwovLyBSZXRyaWV2ZSBhIGxpc3Qgb2Ygc2lnbmF0dXJlcyBmb3IgYSBnaXZlbiB0cmFuc2FjdGlvbiBncm91cCBub25jZSBhbmQgYWRkcmVzcwovLyBAcGFyYW0gdHJhbnNhY3Rpb25Hcm91cCBUcmFuc2FjdGlvbiBHcm91cCBub25jZQovLyBAcGFyYW0gc2lnbmVyIEFkZHJlc3MgeW91IHdhbnQgdG8gcmV0cmlldmUgc2lnbmF0dXJlcyBmb3IKLy8gQHJldHVybnMgQXJyYXkgb2Ygc2lnbmF0dXJlcwphcmM1NV9zaWduYXR1cmVzOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjEyNgoJLy8gc2lnbmF0dXJlQm94OiBUcmFuc2FjdGlvblNpZ25hdHVyZXMgPSB7CgkvLyAgICAgICAgICAgICBub25jZTogdHJhbnNhY3Rpb25Hcm91cCwKCS8vICAgICAgICAgICAgIGFkZHJlc3M6IHNpZ25lcgoJLy8gICAgICAgICB9CglmcmFtZV9kaWcgLTEgLy8gdHJhbnNhY3Rpb25Hcm91cDogdWludDY0CglpdG9iCglmcmFtZV9kaWcgLTIgLy8gc2lnbmVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyBzaWduYXR1cmVCb3g6IFRyYW5zYWN0aW9uU2lnbmF0dXJlcwoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MTMxCgkvLyByZXR1cm4gdGhpcy5fc2lnbmF0dXJlcyhzaWduYXR1cmVCb3gpLnZhbHVlOwoJZnJhbWVfZGlnIDAgLy8gc2lnbmF0dXJlQm94OiBUcmFuc2FjdGlvblNpZ25hdHVyZXMKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAyIDAKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzU1X3NpZ25lckJ5SW5kZXg6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGluZGV4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFyYzU1X3NpZ25lckJ5SW5kZXgodWludDY0KWFkZHJlc3MKCWNhbGxzdWIgYXJjNTVfc2lnbmVyQnlJbmRleAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGFyYzU1X3NpZ25lckJ5SW5kZXgodWludDY0KWFkZHJlc3MKLy8KLy8gRmluZCBvdXQgd2hpY2ggYWRkcmVzcyBpcyBhdCB0aGlzIGluZGV4IG9mIHRoZSBtdWx0aXNpZ25hdHVyZQovLyBAcGFyYW0gaW5kZXggQWRkcmVzcyBhdCB0aGlzIGluZGV4IG9mIHRoZSBtdWx0aXNpZ25hdHVyZQovLyBAcmV0dXJucyBBZGRyZXNzIGF0IGluZGV4CmFyYzU1X3NpZ25lckJ5SW5kZXg6Cglwcm90byAxIDEKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjE0MQoJLy8gcmV0dXJuIHRoaXMuX2luZGV4VG9BZGRyZXNzKGluZGV4KS52YWx1ZTsKCWZyYW1lX2RpZyAtMSAvLyBpbmRleDogdWludDY0CglpdG9iCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgphYmlfcm91dGVfYXJjNTVfaXNTaWduZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzU1X2lzU2lnbmVyKGFkZHJlc3MpYm9vbAoJY2FsbHN1YiBhcmM1NV9pc1NpZ25lcgoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmM1NV9pc1NpZ25lcihhZGRyZXNzKWJvb2wKLy8KLy8gQ2hlY2sgaWYgYW4gYWRkcmVzcyBpcyBhIG1lbWJlciBvZiB0aGUgbXVsdGlzaWduYXR1cmUKLy8gQHBhcmFtIGFkZHJlc3MgQWRkcmVzcyB0byBjaGVjayBpcyBhIHNpZ25lcgovLyBAcmV0dXJucyBUcnVlIGlmIGFkZHJlc3MgaXMgYSBzaWduZXIKYXJjNTVfaXNTaWduZXI6Cglwcm90byAxIDEKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjE1MQoJLy8gcmV0dXJuIHRoaXMuX2FkZHJlc3NDb3VudChhZGRyZXNzKS52YWx1ZSAhPT0gMDsKCWZyYW1lX2RpZyAtMSAvLyBhZGRyZXNzOiBBZGRyZXNzCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCSE9CglyZXRzdWIKCmFiaV9yb3V0ZV9hcmM1NV9tYnJTaWdJbmNyZWFzZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gc2lnbmF0dXJlczogYnl0ZVs2NF1bXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGFyYzU1X21iclNpZ0luY3JlYXNlKGJ5dGVbNjRdW10pdWludDY0CgljYWxsc3ViIGFyYzU1X21iclNpZ0luY3JlYXNlCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjNTVfbWJyU2lnSW5jcmVhc2UoYnl0ZVs2NF1bXSl1aW50NjQKLy8KLy8gQ2FsY3VsYXRlIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgZm9yIHN0b3JpbmcgYSBzaWduYXR1cmUKLy8gQHBhcmFtIHNpZ25hdHVyZXMgUHJvdmlkZWQgc2lnbmF0dXJlIHRvIHN0b3JlCi8vIEByZXR1cm5zIE1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBpbmNyZWFzZQphcmM1NV9tYnJTaWdJbmNyZWFzZToKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoxNjQKCS8vIG1iclNpZ0luY3JlYXNlID0gKDI1MDApICsgKDQwMCAqICg0MCArIDIgKyAoNjQgKiBzaWduYXR1cmVzLmxlbmd0aCkpKQoJaW50IDI1MDAKCWludCA0MDAKCWludCA0MgoJaW50IDY0CglmcmFtZV9kaWcgLTEgLy8gc2lnbmF0dXJlczogYnl0ZXM2NFtdCglsZW4KCWludCA2NAoJLwoJKgoJKwoJKgoJKwoJZnJhbWVfYnVyeSAwIC8vIG1iclNpZ0luY3JlYXNlOiB1aW50NjQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjE2NgoJLy8gcmV0dXJuIG1iclNpZ0luY3JlYXNlOwoJZnJhbWVfZGlnIDAgLy8gbWJyU2lnSW5jcmVhc2U6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgphYmlfcm91dGVfYXJjNTVfbWJyVHhuSW5jcmVhc2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHRyYW5zYWN0aW9uOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBhcmM1NV9tYnJUeG5JbmNyZWFzZShieXRlW10pdWludDY0CgljYWxsc3ViIGFyYzU1X21iclR4bkluY3JlYXNlCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gYXJjNTVfbWJyVHhuSW5jcmVhc2UoYnl0ZVtdKXVpbnQ2NAovLwovLyBDYWxjdWxhdGUgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBmb3Igc3RvcmluZyBhIHRyYW5zYWN0aW9uCi8vIEBwYXJhbSB0cmFuc2FjdGlvbiBQcm92aWRlZCB0cmFuc2FjdGlvbiB0byBzdG9yZQovLyBAcmV0dXJucyBNaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgaW5jcmVhc2UKYXJjNTVfbWJyVHhuSW5jcmVhc2U6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MTc5CgkvLyBtYnJUeG5JbmNyZWFzZSA9ICgyNTAwKSArICg0MDAgKiAoOSArIHRyYW5zYWN0aW9uLmxlbmd0aCkpCglpbnQgMjUwMAoJaW50IDQwMAoJaW50IDkKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2FjdGlvbjogYnl0ZXMKCWxlbgoJKwoJKgoJKwoJZnJhbWVfYnVyeSAwIC8vIG1iclR4bkluY3JlYXNlOiB1aW50NjQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjE4MQoJLy8gcmV0dXJuIG1iclR4bkluY3JlYXNlOwoJZnJhbWVfZGlnIDAgLy8gbWJyVHhuSW5jcmVhc2U6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgphYmlfcm91dGVfYXJjNTVfc2V0dXA6CgkvLyBhZGRyZXNzZXM6IGFkZHJlc3NbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyB0aHJlc2hvbGQ6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBleGVjdXRlIGFyYzU1X3NldHVwKGFkZHJlc3NbXSx1aW50OCl2b2lkCgljYWxsc3ViIGFyYzU1X3NldHVwCglpbnQgMQoJcmV0dXJuCgovLyBhcmM1NV9zZXR1cChhZGRyZXNzW10sdWludDgpdm9pZAovLwovLyBTZXR1cCBPbi1DaGFpbiBNc2lnIEFwcC4gVGhpcyBjYW4gb25seSBiZSBjYWxsZWQgd2hpbHN0IG5vIHRyYW5zYWN0aW9uIGdyb3VwcyBoYXZlIGJlZW4gY3JlYXRlZC4KLy8gQHBhcmFtIHRocmVzaG9sZCBJbml0aWFsIG11bHRpc2lnIHRocmVzaG9sZCwgbXVzdCBiZSBncmVhdGVyIHRoYW4gMAovLyBAcGFyYW0gYWRkcmVzc2VzIEFycmF5IG9mIGFkZHJlc3NlcyB0aGF0IG1ha2UgdXAgdGhlIG11bHRpc2lnCmFyYzU1X3NldHVwOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMwoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MTk1CgkvLyBhc3NlcnQoIXRoaXMuX25vbmNlLnZhbHVlKQoJYnl0ZSAweDVmNmU2ZjZlNjM2NSAvLyAiX25vbmNlIgoJYXBwX2dsb2JhbF9nZXQKCSEKCWFzc2VydAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MTk2CgkvLyB0aGlzLm9ubHlDcmVhdG9yKCkKCWNhbGxzdWIgb25seUNyZWF0b3IKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjE5OAoJLy8gdDogdWludDY0ID0gYnRvaShyYXdCeXRlcyh0aHJlc2hvbGQpKQoJZnJhbWVfZGlnIC0xIC8vIHRocmVzaG9sZDogdWludDgKCWl0b2IKCWV4dHJhY3QgNyAxCglidG9pCglmcmFtZV9idXJ5IDAgLy8gdDogdWludDY0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoxOTkKCS8vIGFzc2VydCh0KQoJZnJhbWVfZGlnIDAgLy8gdDogdWludDY0Cglhc3NlcnQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjIwMAoJLy8gdGhpcy5fdGhyZXNob2xkLnZhbHVlID0gdAoJYnl0ZSAweDVmNzQ2ODcyNjU3MzY4NmY2YzY0IC8vICJfdGhyZXNob2xkIgoJZnJhbWVfZGlnIDAgLy8gdDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjAyCgkvLyB0aGlzLl9ub25jZS52YWx1ZSA9IDAKCWJ5dGUgMHg1ZjZlNmY2ZTYzNjUgLy8gIl9ub25jZSIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjA0CgkvLyBpbmRleCA9IDAKCWludCAwCglmcmFtZV9idXJ5IDEgLy8gaW5kZXg6IHVpbnQ2NAoKd2hpbGVfMDoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjA2CgkvLyBpbmRleCA8IGFkZHJlc3Nlcy5sZW5ndGgKCWZyYW1lX2RpZyAxIC8vIGluZGV4OiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzZXM6IEFkZHJlc3NbXQoJbGVuCglpbnQgMzIKCS8KCTwKCWJ6IHdoaWxlXzBfZW5kCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyMDcKCS8vIGFkZHJlc3MgPSBhZGRyZXNzZXNbaW5kZXhdCglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzc2VzOiBBZGRyZXNzW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMCAvLyBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaW5kZXg6IHVpbnQ2NAoJaW50IDMyCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludCAzMgoJZXh0cmFjdDMKCWZyYW1lX2J1cnkgMiAvLyBhZGRyZXNzOiBBZGRyZXNzCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyMTAKCS8vIHRoaXMuX2luZGV4VG9BZGRyZXNzKGluZGV4KS52YWx1ZSA9IGFkZHJlc3MKCWZyYW1lX2RpZyAxIC8vIGluZGV4OiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAyIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyMTQKCS8vIHRoaXMuX2FkZHJlc3NDb3VudChhZGRyZXNzKS52YWx1ZSA9IHRoaXMuX2FkZHJlc3NDb3VudChhZGRyZXNzKS52YWx1ZSArIDEKCWZyYW1lX2RpZyAyIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWZyYW1lX2RpZyAyIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjIxNgoJLy8gaW5kZXggPSBpbmRleCArIDEKCWZyYW1lX2RpZyAxIC8vIGluZGV4OiB1aW50NjQKCWludCAxCgkrCglmcmFtZV9idXJ5IDEgLy8gaW5kZXg6IHVpbnQ2NAoJYiB3aGlsZV8wCgp3aGlsZV8wX2VuZDoKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzU1X25ld1RyYW5zYWN0aW9uR3JvdXA6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgYXJjNTVfbmV3VHJhbnNhY3Rpb25Hcm91cCgpdWludDY0CgljYWxsc3ViIGFyYzU1X25ld1RyYW5zYWN0aW9uR3JvdXAKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBhcmM1NV9uZXdUcmFuc2FjdGlvbkdyb3VwKCl1aW50NjQKLy8KLy8gR2VuZXJhdGUgYSBuZXcgdHJhbnNhY3Rpb24gZ3JvdXAgbm9uY2UgZm9yIGhvbGRpbmcgcGVuZGluZyB0cmFuc2FjdGlvbnMKLy8gQHJldHVybnMgdHJhbnNhY3Rpb25Hcm91cCBUcmFuc2FjdGlvbiBHcm91cCBub25jZQphcmM1NV9uZXdUcmFuc2FjdGlvbkdyb3VwOgoJcHJvdG8gMCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjIyNQoJLy8gdGhpcy5vbmx5U2lnbmVyKCkKCWNhbGxzdWIgb25seVNpZ25lcgoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjI3CgkvLyBuID0gdGhpcy5fbm9uY2UudmFsdWUgKyAxCglieXRlIDB4NWY2ZTZmNmU2MzY1IC8vICJfbm9uY2UiCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgMCAvLyBuOiB1aW50NjQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjIyOAoJLy8gdGhpcy5fbm9uY2UudmFsdWUgPSBuCglieXRlIDB4NWY2ZTZmNmU2MzY1IC8vICJfbm9uY2UiCglmcmFtZV9kaWcgMCAvLyBuOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyMzAKCS8vIHJldHVybiBuOwoJZnJhbWVfZGlnIDAgLy8gbjogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmM1NV9hZGRUcmFuc2FjdGlvbjoKCS8vIHRyYW5zYWN0aW9uOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gaW5kZXg6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBjb3N0czogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzU1X2FkZFRyYW5zYWN0aW9uKGJ5dGVbXSx1aW50OCx1aW50NjQscGF5KXZvaWQKCWNhbGxzdWIgYXJjNTVfYWRkVHJhbnNhY3Rpb24KCWludCAxCglyZXR1cm4KCi8vIGFyYzU1X2FkZFRyYW5zYWN0aW9uKGJ5dGVbXSx1aW50OCx1aW50NjQscGF5KXZvaWQKLy8KLy8gQWRkIGEgdHJhbnNhY3Rpb24gdG8gYW4gZXhpc3RpbmcgZ3JvdXAuIE9ubHkgb25lIHRyYW5zYWN0aW9uIHNob3VsZCBiZSBpbmNsdWRlZCBwZXIgY2FsbAovLyBAcGFyYW0gY29zdHMgTWluaW11bSBCYWxhbmNlIFJlcXVpcmVtZW50IGZvciBhc3NvY2lhdGVkIGJveCBzdG9yYWdlIGNvc3RzOiAoMjUwMCkgKyAoNDAwICogKDkgKyB0cmFuc2FjdGlvbi5sZW5ndGgpKQovLyBAcGFyYW0gdHJhbnNhY3Rpb25Hcm91cCBUcmFuc2FjdGlvbiBHcm91cCBub25jZQovLyBAcGFyYW0gaW5kZXggVHJhbnNhY3Rpb24gcG9zaXRpb24gd2l0aGluIGF0b21pYyBncm91cCB0byBhZGQKLy8gQHBhcmFtIHRyYW5zYWN0aW9uIFRyYW5zYWN0aW9uIHRvIGFkZAphcmM1NV9hZGRUcmFuc2FjdGlvbjoKCXByb3RvIDQgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjI0NgoJLy8gdGhpcy5vbmx5U2lnbmVyKCkKCWNhbGxzdWIgb25seVNpZ25lcgoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjQ4CgkvLyBtYnJUeG5JbmNyZWFzZSA9IHRoaXMuYXJjNTVfbWJyVHhuSW5jcmVhc2UodHJhbnNhY3Rpb24pCglmcmFtZV9kaWcgLTQgLy8gdHJhbnNhY3Rpb246IGJ5dGVzCgljYWxsc3ViIGFyYzU1X21iclR4bkluY3JlYXNlCglmcmFtZV9idXJ5IDAgLy8gbWJyVHhuSW5jcmVhc2U6IHVpbnQ2NAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjUwCgkvLyB2ZXJpZnlUeG4oY29zdHMsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBtYnJUeG5JbmNyZWFzZQoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gY29zdHM6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGNvc3RzOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIDAgLy8gbWJyVHhuSW5jcmVhc2U6IHVpbnQ2NAoJPT0KCWFzc2VydAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjU1CgkvLyBhc3NlcnQodHJhbnNhY3Rpb25Hcm91cCkKCWZyYW1lX2RpZyAtMiAvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCWFzc2VydAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjU2CgkvLyBhc3NlcnQodHJhbnNhY3Rpb25Hcm91cCA8PSB0aGlzLl9ub25jZS52YWx1ZSkKCWZyYW1lX2RpZyAtMiAvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCWJ5dGUgMHg1ZjZlNmY2ZTYzNjUgLy8gIl9ub25jZSIKCWFwcF9nbG9iYWxfZ2V0Cgk8PQoJYXNzZXJ0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyNTgKCS8vIHRyYW5zYWN0aW9uQm94OiBUcmFuc2FjdGlvbkdyb3VwID0gewoJLy8gICAgICAgICAgICAgbm9uY2U6IHRyYW5zYWN0aW9uR3JvdXAsCgkvLyAgICAgICAgICAgICBpbmRleDogaW5kZXgsCgkvLyAgICAgICAgIH0KCWZyYW1lX2RpZyAtMiAvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMyAvLyBpbmRleDogdWludDgKCWl0b2IKCWV4dHJhY3QgNyAxCgljb25jYXQKCWZyYW1lX2J1cnkgMSAvLyB0cmFuc2FjdGlvbkJveDogVHJhbnNhY3Rpb25Hcm91cAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjY1CgkvLyB0aGlzLl90cmFuc2FjdGlvbnModHJhbnNhY3Rpb25Cb3gpLnZhbHVlID0gdHJhbnNhY3Rpb24KCWZyYW1lX2RpZyAxIC8vIHRyYW5zYWN0aW9uQm94OiBUcmFuc2FjdGlvbkdyb3VwCglkdXAKCWJveF9kZWwKCXBvcAoJZnJhbWVfZGlnIC00IC8vIHRyYW5zYWN0aW9uOiBieXRlcwoJYm94X3B1dAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MjY4CgkvLyB0aGlzLlRyYW5zYWN0aW9uQWRkZWQubG9nKHsKCS8vICAgICAgICAgICAgIHRyYW5zYWN0aW9uR3JvdXA6IHRyYW5zYWN0aW9uR3JvdXAsCgkvLyAgICAgICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBpbmRleAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDE4NDlhNTk0IC8vIFRyYW5zYWN0aW9uQWRkZWQodWludDY0LHVpbnQ4KQoJZnJhbWVfZGlnIC0yIC8vIHRyYW5zYWN0aW9uR3JvdXA6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC0zIC8vIGluZGV4OiB1aW50OAoJaXRvYgoJZXh0cmFjdCA3IDEKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FyYzU1X3JlbW92ZVRyYW5zYWN0aW9uOgoJLy8gaW5kZXg6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFyYzU1X3JlbW92ZVRyYW5zYWN0aW9uKHVpbnQ4LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGFyYzU1X3JlbW92ZVRyYW5zYWN0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBhcmM1NV9yZW1vdmVUcmFuc2FjdGlvbih1aW50OCx1aW50NjQpdm9pZAovLwovLyBSZW1vdmUgdHJhbnNhY3Rpb24gZnJvbSB0aGUgYXBwLiBUaGUgTUJSIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHJhbnNhY3Rpb24gd2lsbCBiZSByZXR1cm5lZCB0byB0aGUgdHJhbnNhY3Rpb24gc2VuZGVyLgovLyBAcGFyYW0gdHJhbnNhY3Rpb25Hcm91cCBUcmFuc2FjdGlvbiBHcm91cCBub25jZQovLyBAcGFyYW0gaW5kZXggVHJhbnNhY3Rpb24gcG9zaXRpb24gd2l0aGluIGF0b21pYyBncm91cCB0byByZW1vdmUKYXJjNTVfcmVtb3ZlVHJhbnNhY3Rpb246Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAzCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyODMKCS8vIHRoaXMub25seVNpZ25lcigpCgljYWxsc3ViIG9ubHlTaWduZXIKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjI4NQoJLy8gdHJhbnNhY3Rpb25Cb3g6IFRyYW5zYWN0aW9uR3JvdXAgPSB7CgkvLyAgICAgICAgICAgICBub25jZTogdHJhbnNhY3Rpb25Hcm91cCwKCS8vICAgICAgICAgICAgIGluZGV4OiBpbmRleCwKCS8vICAgICAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zYWN0aW9uR3JvdXA6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC0yIC8vIGluZGV4OiB1aW50OAoJaXRvYgoJZXh0cmFjdCA3IDEKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHRyYW5zYWN0aW9uQm94OiBUcmFuc2FjdGlvbkdyb3VwCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyOTAKCS8vIHR4bkxlbmd0aCA9IHRoaXMuX3RyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbkJveCkuc2l6ZQoJZnJhbWVfZGlnIDAgLy8gdHJhbnNhY3Rpb25Cb3g6IFRyYW5zYWN0aW9uR3JvdXAKCWJveF9sZW4KCWFzc2VydAoJZnJhbWVfYnVyeSAxIC8vIHR4bkxlbmd0aDogdWludDY0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czoyOTEKCS8vIHRoaXMuX3RyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbkJveCkuZGVsZXRlCglmcmFtZV9kaWcgMCAvLyB0cmFuc2FjdGlvbkJveDogVHJhbnNhY3Rpb25Hcm91cAoJYm94X2RlbAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6Mjk2CgkvLyBtYnJUeG5EZWNyZWFzZSA9ICgyNTAwKSArICg0MDAgKiAoOSArIHR4bkxlbmd0aCkpCglpbnQgMjUwMAoJaW50IDQwMAoJaW50IDkKCWZyYW1lX2RpZyAxIC8vIHR4bkxlbmd0aDogdWludDY0CgkrCgkqCgkrCglmcmFtZV9idXJ5IDIgLy8gbWJyVHhuRGVjcmVhc2U6IHVpbnQ2NAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6Mjk4CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBtYnJUeG5EZWNyZWFzZQoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6Mjk5CgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozMDAKCS8vIGFtb3VudDogbWJyVHhuRGVjcmVhc2UKCWZyYW1lX2RpZyAyIC8vIG1iclR4bkRlY3JlYXNlOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MzA0CgkvLyB0aGlzLlRyYW5zYWN0aW9uUmVtb3ZlZC5sb2coewoJLy8gICAgICAgICAgICAgdHJhbnNhY3Rpb25Hcm91cDogdHJhbnNhY3Rpb25Hcm91cCwKCS8vICAgICAgICAgICAgIHRyYW5zYWN0aW9uSW5kZXg6IGluZGV4CgkvLyAgICAgICAgIH0pCglieXRlIDB4M2U5YjJjYTUgLy8gVHJhbnNhY3Rpb25SZW1vdmVkKHVpbnQ2NCx1aW50OCkKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBpbmRleDogdWludDgKCWl0b2IKCWV4dHJhY3QgNyAxCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmM1NV9zZXRTaWduYXR1cmVzOgoJLy8gc2lnbmF0dXJlczogYnl0ZVs2NF1bXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBjb3N0czogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzU1X3NldFNpZ25hdHVyZXMoYnl0ZVs2NF1bXSx1aW50NjQscGF5KXZvaWQKCWNhbGxzdWIgYXJjNTVfc2V0U2lnbmF0dXJlcwoJaW50IDEKCXJldHVybgoKLy8gYXJjNTVfc2V0U2lnbmF0dXJlcyhieXRlWzY0XVtdLHVpbnQ2NCxwYXkpdm9pZAovLwovLyBTZXQgc2lnbmF0dXJlcyBmb3IgYSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uIGdyb3VwLiBTaWduYXR1cmVzIG11c3QgYmUgaW5jbHVkZWQgYXMgYW4gYXJyYXkgb2YgYnl0ZS1hcnJheXMKLy8gQHBhcmFtIGNvc3RzIE1pbmltdW0gQmFsYW5jZSBSZXF1aXJlbWVudCBmb3IgYXNzb2NpYXRlZCBib3ggc3RvcmFnZSBjb3N0czogKDI1MDApICsgKDQwMCAqICg0MCArIHNpZ25hdHVyZXMubGVuZ3RoKSkKLy8gQHBhcmFtIHRyYW5zYWN0aW9uR3JvdXAgVHJhbnNhY3Rpb24gR3JvdXAgbm9uY2UKLy8gQHBhcmFtIHNpZ25hdHVyZXMgQXJyYXkgb2Ygc2lnbmF0dXJlcwphcmM1NV9zZXRTaWduYXR1cmVzOgoJcHJvdG8gMyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MzIxCgkvLyB0aGlzLm9ubHlTaWduZXIoKQoJY2FsbHN1YiBvbmx5U2lnbmVyCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozMjMKCS8vIG1iclNpZ0luY3JlYXNlID0gdGhpcy5hcmM1NV9tYnJTaWdJbmNyZWFzZShzaWduYXR1cmVzKQoJZnJhbWVfZGlnIC0zIC8vIHNpZ25hdHVyZXM6IGJ5dGVzNjRbXQoJY2FsbHN1YiBhcmM1NV9tYnJTaWdJbmNyZWFzZQoJZnJhbWVfYnVyeSAwIC8vIG1iclNpZ0luY3JlYXNlOiB1aW50NjQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjMyNQoJLy8gdmVyaWZ5VHhuKGNvc3RzLCB7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogbWJyU2lnSW5jcmVhc2UsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBjb3N0czogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gY29zdHM6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglmcmFtZV9kaWcgMCAvLyBtYnJTaWdJbmNyZWFzZTogdWludDY0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozMzAKCS8vIHNpZ25hdHVyZUJveDogVHJhbnNhY3Rpb25TaWduYXR1cmVzID0gewoJLy8gICAgICAgICAgICAgbm9uY2U6IHRyYW5zYWN0aW9uR3JvdXAsCgkvLyAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLnR4bi5zZW5kZXIKCS8vICAgICAgICAgfQoJZnJhbWVfZGlnIC0yIC8vIHRyYW5zYWN0aW9uR3JvdXA6IHVpbnQ2NAoJaXRvYgoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9idXJ5IDEgLy8gc2lnbmF0dXJlQm94OiBUcmFuc2FjdGlvblNpZ25hdHVyZXMKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjMzNQoJLy8gdGhpcy5fc2lnbmF0dXJlcyhzaWduYXR1cmVCb3gpLnZhbHVlID0gc2lnbmF0dXJlcwoJZnJhbWVfZGlnIDEgLy8gc2lnbmF0dXJlQm94OiBUcmFuc2FjdGlvblNpZ25hdHVyZXMKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTMgLy8gc2lnbmF0dXJlczogYnl0ZXM2NFtdCglkdXAKCWxlbgoJaW50IDY0CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozMzgKCS8vIHRoaXMuU2lnbmF0dXJlU2V0LmxvZyh7CgkvLyAgICAgICAgICAgICB0cmFuc2FjdGlvbkdyb3VwOiB0cmFuc2FjdGlvbkdyb3VwLAoJLy8gICAgICAgICAgICAgc2lnbmVyOiB0aGlzLnR4bi5zZW5kZXIKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhlY2ZiY2IzMyAvLyBTaWduYXR1cmVTZXQodWludDY0LGFkZHJlc3MpCglmcmFtZV9kaWcgLTIgLy8gdHJhbnNhY3Rpb25Hcm91cDogdWludDY0CglpdG9iCgl0eG4gU2VuZGVyCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9hcmM1NV9jbGVhclNpZ25hdHVyZXM6CgkvLyBhZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gdHJhbnNhY3Rpb25Hcm91cDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhcmM1NV9jbGVhclNpZ25hdHVyZXMoYWRkcmVzcyx1aW50NjQpdm9pZAoJY2FsbHN1YiBhcmM1NV9jbGVhclNpZ25hdHVyZXMKCWludCAxCglyZXR1cm4KCi8vIGFyYzU1X2NsZWFyU2lnbmF0dXJlcyhhZGRyZXNzLHVpbnQ2NCl2b2lkCi8vCi8vIENsZWFyIHNpZ25hdHVyZXMgZm9yIGFuIGFkZHJlc3MuIEJlIGF3YXJlIHRoaXMgb25seSByZW1vdmVzIGl0IGZyb20gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGxlZGdlciwgYW5kIGluZGV4ZXJzIHdpbGwgc3RpbGwga25vdyBhbmQgY291bGQgdXNlIHlvdXIgc2lnbmF0dXJlCi8vIEBwYXJhbSB0cmFuc2FjdGlvbkdyb3VwIFRyYW5zYWN0aW9uIEdyb3VwIG5vbmNlCi8vIEBwYXJhbSBhZGRyZXNzIEFkZHJlc3Mgd2hvc2Ugc2lnbmF0dXJlcyB0byBjbGVhcgphcmM1NV9jbGVhclNpZ25hdHVyZXM6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAzCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozNTMKCS8vIHRoaXMub25seVNpZ25lcigpCgljYWxsc3ViIG9ubHlTaWduZXIKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjM1NQoJLy8gc2lnbmF0dXJlQm94OiBUcmFuc2FjdGlvblNpZ25hdHVyZXMgPSB7CgkvLyAgICAgICAgICAgICBub25jZTogdHJhbnNhY3Rpb25Hcm91cCwKCS8vICAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3MKCS8vICAgICAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zYWN0aW9uR3JvdXA6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC0yIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHNpZ25hdHVyZUJveDogVHJhbnNhY3Rpb25TaWduYXR1cmVzCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozNjAKCS8vIHNpZ0xlbmd0aCA9IHRoaXMuX3NpZ25hdHVyZXMoc2lnbmF0dXJlQm94KS5zaXplCglmcmFtZV9kaWcgMCAvLyBzaWduYXR1cmVCb3g6IFRyYW5zYWN0aW9uU2lnbmF0dXJlcwoJYm94X2xlbgoJYXNzZXJ0CglmcmFtZV9idXJ5IDEgLy8gc2lnTGVuZ3RoOiB1aW50NjQKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjM2MQoJLy8gdGhpcy5fc2lnbmF0dXJlcyhzaWduYXR1cmVCb3gpLmRlbGV0ZQoJZnJhbWVfZGlnIDAgLy8gc2lnbmF0dXJlQm94OiBUcmFuc2FjdGlvblNpZ25hdHVyZXMKCWJveF9kZWwKCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjM2NgoJLy8gbWJyU2lnRGVjcmVhc2UgPSAoMjUwMCkgKyAoNDAwICogKDQwICsgc2lnTGVuZ3RoKSkKCWludCAyNTAwCglpbnQgNDAwCglpbnQgNDAKCWZyYW1lX2RpZyAxIC8vIHNpZ0xlbmd0aDogdWludDY0CgkrCgkqCgkrCglmcmFtZV9idXJ5IDIgLy8gbWJyU2lnRGVjcmVhc2U6IHVpbnQ2NAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6MzY4CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogbWJyU2lnRGVjcmVhc2UKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvYXJjcy9hcmM1NS5hbGdvLnRzOjM2OQoJLy8gcmVjZWl2ZXI6IGFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL2FyY3MvYXJjNTUuYWxnby50czozNzAKCS8vIGFtb3VudDogbWJyU2lnRGVjcmVhc2UKCWZyYW1lX2RpZyAyIC8vIG1iclNpZ0RlY3JlYXNlOiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9hcmNzL2FyYzU1LmFsZ28udHM6Mzc0CgkvLyB0aGlzLlNpZ25hdHVyZVNldC5sb2coewoJLy8gICAgICAgICAgICAgdHJhbnNhY3Rpb25Hcm91cDogdHJhbnNhY3Rpb25Hcm91cCwKCS8vICAgICAgICAgICAgIHNpZ25lcjogYWRkcmVzcwoJLy8gICAgICAgICB9KQoJYnl0ZSAweGVjZmJjYjMzIC8vIFNpZ25hdHVyZVNldCh1aW50NjQsYWRkcmVzcykKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2FjdGlvbkdyb3VwOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9kZXBsb3k6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZGVwbG95KCl1aW50NjQKCWNhbGxzdWIgZGVwbG95CglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZGVwbG95KCl1aW50NjQKLy8KLy8gRGVwbG95IGEgbmV3IE9uLUNoYWluIE1zaWcgQXBwLgovLyBAcmV0dXJucyBNc2lnIEFwcCBBcHBsaWNhdGlvbiBJRApkZXBsb3k6Cglwcm90byAwIDEKCgkvLyBzcmMvbXNpZy1hcHAuYWxnby50czoxMQoJLy8gcmV0dXJuIGdsb2JhbHMuY3VycmVudEFwcGxpY2F0aW9uSUQ7CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZToKCS8vIGV4ZWN1dGUgdXBkYXRlKCl2b2lkCgljYWxsc3ViIHVwZGF0ZQoJaW50IDEKCXJldHVybgoKLy8gdXBkYXRlKCl2b2lkCi8vCi8vIFVwZGF0ZSB0aGUgYXBwbGljYXRpb24KdXBkYXRlOgoJcHJvdG8gMCAwCgoJLy8gc3JjL21zaWctYXBwLmFsZ28udHM6MTkKCS8vIHRoaXMub25seUNyZWF0b3IoKQoJY2FsbHN1YiBvbmx5Q3JlYXRvcgoJcmV0c3ViCgphYmlfcm91dGVfZGVzdHJveToKCS8vIGV4ZWN1dGUgZGVzdHJveSgpdm9pZAoJY2FsbHN1YiBkZXN0cm95CglpbnQgMQoJcmV0dXJuCgovLyBkZXN0cm95KCl2b2lkCi8vCi8vIERlc3Ryb3kgdGhlIGFwcGxpY2F0aW9uIGFuZCByZXR1cm4gZnVuZHMgdG8gY3JlYXRvciBhZGRyZXNzLiBBbGwgdHJhbnNhY3Rpb25zIG11c3QgYmUgcmVtb3ZlZCBiZWZvcmUgY2FsbGluZyBkZXN0cm95CmRlc3Ryb3k6Cglwcm90byAwIDAKCgkvLyBzcmMvbXNpZy1hcHAuYWxnby50czoyNwoJLy8gdGhpcy5vbmx5Q3JlYXRvcigpCgljYWxsc3ViIG9ubHlDcmVhdG9yCgoJLy8gc3JjL21zaWctYXBwLmFsZ28udHM6MjkKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogZ2xvYmFscy5jcmVhdG9yQWRkcmVzcywKCS8vICAgICAgICAgICAgIGZlZTogMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvbXNpZy1hcHAuYWxnby50czozMAoJLy8gYW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBzcmMvbXNpZy1hcHAuYWxnby50czozMQoJLy8gcmVjZWl2ZXI6IGdsb2JhbHMuY3JlYXRvckFkZHJlc3MKCWdsb2JhbCBDcmVhdG9yQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9tc2lnLWFwcC5hbGdvLnRzOjMyCgkvLyBjbG9zZVJlbWFpbmRlclRvOiBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzCglnbG9iYWwgQ3JlYXRvckFkZHJlc3MKCWl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwoKCS8vIHNyYy9tc2lnLWFwcC5hbGdvLnRzOjMzCgkvLyBmZWU6IDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKY3JlYXRlX05vT3A6CgltZXRob2QgImRlcGxveSgpdWludDY0IgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2RlcGxveQoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgImFyYzU1X3RocmVzaG9sZCgpdWludDY0IgoJbWV0aG9kICJhcmM1NV90cmFuc2FjdGlvbih1aW50NjQsdWludDgpYnl0ZVtdIgoJbWV0aG9kICJhcmM1NV9zaWduYXR1cmVzKHVpbnQ2NCxhZGRyZXNzKWJ5dGVbNjRdW10iCgltZXRob2QgImFyYzU1X3NpZ25lckJ5SW5kZXgodWludDY0KWFkZHJlc3MiCgltZXRob2QgImFyYzU1X2lzU2lnbmVyKGFkZHJlc3MpYm9vbCIKCW1ldGhvZCAiYXJjNTVfbWJyU2lnSW5jcmVhc2UoYnl0ZVs2NF1bXSl1aW50NjQiCgltZXRob2QgImFyYzU1X21iclR4bkluY3JlYXNlKGJ5dGVbXSl1aW50NjQiCgltZXRob2QgImFyYzU1X3NldHVwKHVpbnQ4LGFkZHJlc3NbXSl2b2lkIgoJbWV0aG9kICJhcmM1NV9uZXdUcmFuc2FjdGlvbkdyb3VwKCl1aW50NjQiCgltZXRob2QgImFyYzU1X2FkZFRyYW5zYWN0aW9uKHBheSx1aW50NjQsdWludDgsYnl0ZVtdKXZvaWQiCgltZXRob2QgImFyYzU1X3JlbW92ZVRyYW5zYWN0aW9uKHVpbnQ2NCx1aW50OCl2b2lkIgoJbWV0aG9kICJhcmM1NV9zZXRTaWduYXR1cmVzKHBheSx1aW50NjQsYnl0ZVs2NF1bXSl2b2lkIgoJbWV0aG9kICJhcmM1NV9jbGVhclNpZ25hdHVyZXModWludDY0LGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9hcmM1NV90aHJlc2hvbGQgYWJpX3JvdXRlX2FyYzU1X3RyYW5zYWN0aW9uIGFiaV9yb3V0ZV9hcmM1NV9zaWduYXR1cmVzIGFiaV9yb3V0ZV9hcmM1NV9zaWduZXJCeUluZGV4IGFiaV9yb3V0ZV9hcmM1NV9pc1NpZ25lciBhYmlfcm91dGVfYXJjNTVfbWJyU2lnSW5jcmVhc2UgYWJpX3JvdXRlX2FyYzU1X21iclR4bkluY3JlYXNlIGFiaV9yb3V0ZV9hcmM1NV9zZXR1cCBhYmlfcm91dGVfYXJjNTVfbmV3VHJhbnNhY3Rpb25Hcm91cCBhYmlfcm91dGVfYXJjNTVfYWRkVHJhbnNhY3Rpb24gYWJpX3JvdXRlX2FyYzU1X3JlbW92ZVRyYW5zYWN0aW9uIGFiaV9yb3V0ZV9hcmM1NV9zZXRTaWduYXR1cmVzIGFiaV9yb3V0ZV9hcmM1NV9jbGVhclNpZ25hdHVyZXMKCWVycgoKY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCW1ldGhvZCAidXBkYXRlKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3VwZGF0ZQoJZXJyCgpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJkZXN0cm95KCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2Rlc3Ryb3kKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "MsigApp",
    "desc": "",
    "methods": [
      {
        "name": "arc55_threshold",
        "desc": "Retrieve the signature threshold required for the multisignature to be submitted",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Multisignature threshold"
        }
      },
      {
        "name": "arc55_transaction",
        "desc": "Retrieve a transaction from a given transaction group",
        "readonly": true,
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "transactionIndex",
            "type": "uint8",
            "desc": "Index of transaction within group"
          }
        ],
        "returns": {
          "type": "byte[]",
          "desc": "A single transaction at the specified index for the transaction group nonce"
        }
      },
      {
        "name": "arc55_signatures",
        "desc": "Retrieve a list of signatures for a given transaction group nonce and address",
        "readonly": true,
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "signer",
            "type": "address",
            "desc": "Address you want to retrieve signatures for"
          }
        ],
        "returns": {
          "type": "byte[64][]",
          "desc": "Array of signatures"
        }
      },
      {
        "name": "arc55_signerByIndex",
        "desc": "Find out which address is at this index of the multisignature",
        "readonly": true,
        "args": [
          {
            "name": "index",
            "type": "uint64",
            "desc": "Address at this index of the multisignature"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Address at index"
        }
      },
      {
        "name": "arc55_isSigner",
        "desc": "Check if an address is a member of the multisignature",
        "readonly": true,
        "args": [
          {
            "name": "address",
            "type": "address",
            "desc": "Address to check is a signer"
          }
        ],
        "returns": {
          "type": "bool",
          "desc": "True if address is a signer"
        }
      },
      {
        "name": "arc55_mbrSigIncrease",
        "desc": "Calculate the minimum balance requirement for storing a signature",
        "readonly": true,
        "args": [
          {
            "name": "signatures",
            "type": "byte[64][]",
            "desc": "Provided signature to store"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "Minimum balance requirement increase"
        }
      },
      {
        "name": "arc55_mbrTxnIncrease",
        "desc": "Calculate the minimum balance requirement for storing a transaction",
        "readonly": true,
        "args": [
          {
            "name": "transaction",
            "type": "byte[]",
            "desc": "Provided transaction to store"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "Minimum balance requirement increase"
        }
      },
      {
        "name": "arc55_setup",
        "desc": "Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.",
        "args": [
          {
            "name": "threshold",
            "type": "uint8",
            "desc": "Initial multisig threshold, must be greater than 0"
          },
          {
            "name": "addresses",
            "type": "address[]",
            "desc": "Array of addresses that make up the multisig"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc55_newTransactionGroup",
        "desc": "Generate a new transaction group nonce for holding pending transactions",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "transactionGroup Transaction Group nonce"
        }
      },
      {
        "name": "arc55_addTransaction",
        "desc": "Add a transaction to an existing group. Only one transaction should be included per call",
        "args": [
          {
            "name": "costs",
            "type": "pay",
            "desc": "Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (9 + transaction.length))"
          },
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "index",
            "type": "uint8",
            "desc": "Transaction position within atomic group to add"
          },
          {
            "name": "transaction",
            "type": "byte[]",
            "desc": "Transaction to add"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TransactionAdded",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "transactionIndex",
                "type": "uint8"
              }
            ],
            "desc": "Emitted when a new transaction is added to a transaction group"
          }
        ]
      },
      {
        "name": "arc55_removeTransaction",
        "desc": "Remove transaction from the app. The MBR associated with the transaction will be returned to the transaction sender.",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "index",
            "type": "uint8",
            "desc": "Transaction position within atomic group to remove"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TransactionRemoved",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "transactionIndex",
                "type": "uint8"
              }
            ],
            "desc": "Emitted when a transaction has been removed from a transaction group"
          }
        ]
      },
      {
        "name": "arc55_setSignatures",
        "desc": "Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays",
        "args": [
          {
            "name": "costs",
            "type": "pay",
            "desc": "Minimum Balance Requirement for associated box storage costs: (2500) + (400 * (40 + signatures.length))"
          },
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "signatures",
            "type": "byte[64][]",
            "desc": "Array of signatures"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SignatureSet",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "signer",
                "type": "address"
              }
            ],
            "desc": "Emitted when a new signature is added to a transaction group"
          }
        ]
      },
      {
        "name": "arc55_clearSignatures",
        "desc": "Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "address",
            "type": "address",
            "desc": "Address whose signatures to clear"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SignatureSet",
            "args": [
              {
                "name": "transactionGroup",
                "type": "uint64"
              },
              {
                "name": "signer",
                "type": "address"
              }
            ],
            "desc": "Emitted when a new signature is added to a transaction group"
          }
        ]
      },
      {
        "name": "deploy",
        "desc": "Deploy a new On-Chain Msig App.",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Msig App Application ID"
        }
      },
      {
        "name": "update",
        "desc": "Update the application",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the application and return funds to creator address. All transactions must be removed before calling destroy",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "TransactionAdded",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "transactionIndex",
            "type": "uint8"
          }
        ],
        "desc": "Emitted when a new transaction is added to a transaction group"
      },
      {
        "name": "TransactionRemoved",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "transactionIndex",
            "type": "uint8"
          }
        ],
        "desc": "Emitted when a transaction has been removed from a transaction group"
      },
      {
        "name": "SignatureSet",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "signer",
            "type": "address"
          }
        ],
        "desc": "Emitted when a new signature is added to a transaction group"
      },
      {
        "name": "SignatureCleared",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64"
          },
          {
            "name": "signer",
            "type": "address"
          }
        ],
        "desc": "Emitted when a signature has been removed from a transaction group"
      }
    ]
  }
}