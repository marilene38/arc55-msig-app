{
  "hints": {
    "deploy()uint64": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "arc55_setup(uint8,address[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_newTransactionGroup()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_addTransaction(pay,uint64,uint8,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_removeTransaction(uint64,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_setSignatures(pay,uint64,byte[][])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc55_clearSignatures(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "threshold": {
          "type": "uint64",
          "key": "t"
        },
        "nonce": {
          "type": "uint64",
          "key": "n"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 8,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "MsigApp",
    "desc": "",
    "methods": [
      {
        "name": "deploy",
        "args": [],
        "desc": "Deploy a new On-Chain Msig App.",
        "returns": {
          "type": "uint64",
          "desc": "Msig App Application ID"
        }
      },
      {
        "name": "update",
        "args": [],
        "desc": "Update the application",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "destroy",
        "args": [],
        "desc": "Destroy the application and return funds to creator address. All transactions must be removed before calling destroy",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc55_setup",
        "args": [
          {
            "name": "threshold",
            "type": "uint8",
            "desc": "Initial multisig threshold, must be greater than 0"
          },
          {
            "name": "addresses",
            "type": "address[]",
            "desc": "Array of addresses that make up the multisig"
          }
        ],
        "desc": "Setup On-Chain Msig App. This can only be called whilst no transaction groups have been created.",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc55_newTransactionGroup",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "arc55_addTransaction",
        "args": [
          {
            "name": "costs",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "index",
            "type": "uint8",
            "desc": "Transaction position within atomic group to add"
          },
          {
            "name": "transaction",
            "type": "byte[]",
            "desc": "Transaction to add"
          }
        ],
        "desc": "Add a transaction to an existing group. Only one transaction should be included per call",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc55_removeTransaction",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "index",
            "type": "uint8",
            "desc": "Transaction position within atomic group to remove"
          }
        ],
        "desc": "Remove transaction from the app. Unlike signatures which will remove all previous signatures when a new one is added, you must clear all previous transactions if you want to reuse the same app",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc55_setSignatures",
        "args": [
          {
            "name": "costs",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": "Transaction Group nonce"
          },
          {
            "name": "signatures",
            "type": "byte[][]",
            "desc": "Array of signatures"
          }
        ],
        "desc": "Set signatures for a particular transaction group. Signatures must be included as an array of byte-arrays",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "arc55_clearSignatures",
        "args": [
          {
            "name": "transactionGroup",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "address",
            "type": "address",
            "desc": "Address whose signatures to clear"
          }
        ],
        "desc": "Clear signatures for an address. Be aware this only removes it from the current state of the ledger, and indexers will still know and could use your signature",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}